install.packages("read_gt3x")
devtools::install_github("paulhibbing/AGread")
library(AGread)
read_gt3x("C:/Users/Arslan/Documents/Actigrpah_file/TAS1H19200131_test.gt3x", tz = "UTC", verbose = FALSE, include = c("METADATA",
"PARAMETERS", "SENSOR_SCHEMA", "BATTERY", "EVENT", "TAG", "ACTIVITY",
"HEART_RATE_BPM", "HEART_RATE_ANT", "HEART_RATE_BLE", "LUX", "CAPSENSE",
"EPOCH", "EPOCH2", "EPOCH3", "EPOCH4", "ACTIVITY2", "SENSOR_DATA"))
x <- read_gt3x("C:/Users/Arslan/Documents/Actigrpah_file/TAS1H19200131_test.gt3x", tz = "UTC", verbose = FALSE)
x
View(x)
View(x[["IMU"]])
x <- read_gt3x("C:/Users/Arslan/Documents/Actigrpah_file/TAS1H19200131_test.gt3x", tz = "UTC", verbose = FALSE)
imu <- x["IMU"]
x <- read_gt3x("C:/Users/Arslan/Documents/Actigrpah_file/TAS1H19200131_test.gt3x", tz = "UTC", verbose = FALSE)
x
imu <- x["IMU"]
imu
x <- read_gt3x("C:/Users/Arslan/Documents/Actigrpah_file/TAS1H19200131_test.gt3x", tz = "UTC", verbose = FALSE)
library(AGread)
x <- read_gt3x("C:/Users/Arslan/Documents/Actigrpah_file/TAS1H19200131_test.gt3x", tz = "UTC", verbose = FALSE)
x
imu <- x["IMU"]
imu
View(x)
View(x)
View(x)
Hz <- x["PARAMETERS"]["Payload"]["SAMPLE_RATE"]
print(Hz)
print(Hz)
Hz
Hz <- x["PARAMETERS"]
Hz
Hz <- x[["PARAMETERS"]["Payload"]]
Hz <- x["PARAMETERS"]["Payload"]
Hz <- [x["PARAMETERS"]]["Payload"]
Hz <- x["PARAMETERS", "Payload"]
Hz
Hz <- x["PARAMETERS", "Payload"]
Hz <- x[["PARAMETERS"], ["Payload"]]
Hz <- x[["PARAMETERS"]["Payload"]]
Hz
Hz <- x[["PARAMETERS"]["Payload"]]
Hz
Hz <- x[["Payload"]]
Hz
Hz <- x["Payload"]
Hz
View(imu)
View(x)
Hz <- x[["PARAMETERS"]][["Payload"]][["SAMPLE_RATE"]]
Hz
Start_time <- x[["PARAMETERS"]][["Payload"]][["TARGET_START_TIME"]]
Start_time
detach("package:AGread", unload = TRUE)
library(AGread)
x <- read_gt3x("C:/Users/Arslan/Documents/Actigrpah_file/TAS1H19200131_test.gt3x", tz = "UTC", verbose = FALSE)
Hz <- toString(x[["PARAMETERS"]][["Payload"]][["SAMPLE_RATE"]])
Start_time <- x[["PARAMETERS"]][["Payload"]][["TARGET_START_TIME"]]
Serial_Number <- x[["info"]][["Serial_Number"]]
Acceleration_Max <- x[["info"]][["Acceleration_Max"]]
Acceleration_Min <- x[["info"]][["Acceleration_Min"]]
Firmware <- x[["info"]][["Firmware"]]
x <- read_gt3x("C:/Users/Arslan/Documents/Actigrpah_file/TAS1H19200131_test.gt3x", tz = "UTC", verbose = FALSE)
library(AGread)
x <- read_gt3x("C:/Users/Arslan/Documents/Actigrpah_file/TAS1H19200131_test.gt3x", tz = "UTC", verbose = FALSE)
Hz <- toString(x[["PARAMETERS"]][["Payload"]][["SAMPLE_RATE"]])
Start_time <- x[["PARAMETERS"]][["Payload"]][["TARGET_START_TIME"]]
Serial_Number <- x[["info"]][["Serial_Number"]]
Acceleration_Max <- x[["info"]][["Acceleration_Max"]]
Acceleration_Min <- x[["info"]][["Acceleration_Min"]]
Firmware <- x[["info"]][["Firmware"]]
x <- read_gt3x("C:/Users/Arslan/Documents/Actigrpah_file/TAS1H19200131_test.gt3x", tz = "UTC", verbose = FALSE)
Hz <- as.integer(x[["PARAMETERS"]][["Payload"]][["SAMPLE_RATE"]])
Start_time <- toString(x[["PARAMETERS"]][["Payload"]][["TARGET_START_TIME"]])
Serial_Number <- toString(x[["info"]][["Serial_Number"]])
Acceleration_Max <- as.integer(x[["info"]][["Acceleration_Max"]])
Acceleration_Min <- as.integer(x[["info"]][["Acceleration_Min"]])
Firmware <- toString(x[["info"]][["Firmware"]])
x <- read_gt3x("C:/Users/Arslan/Documents/Actigrpah_file/TAS1H19200131_test.gt3x", tz = "UTC", verbose = FALSE)
Hz <- as.integer(x[["PARAMETERS"]][["Payload"]][["SAMPLE_RATE"]])
load("~/Actigrpah_file/actiTest.RData")
View(x)
View(y)
View(x)
View(y)
View(x)
config <- x[["PARAMETERS"]][["Payload"]][["SENSOR_CONFIGURATION"]]
H <- x[["PARAMETERS"]][["Payload"]][["SAMPLE_RATE"]]
Hz <- length(str(z, integer))
Start_time <- toString(x[["PARAMETERS"]][["Payload"]][["TARGET_START_TIME"]])
Serial_Number <- toString(x[["info"]][["Serial_Number"]])
AMax <- x[["info"]][["Acceleration_Max"]]
AMin <- x[["info"]][["Acceleration_Min"]]
Firmware <- toString(x[["info"]][["Firmware"]])
name <- c("uniqueSerialCode", "frequency", "start", "Acceleration_Min",
"Acceleration_Max", "device", "firmwareVersion")
value <- c(Serial_Number, z, Start_time, AMin, AMax,
"ActiGraph", Firmware)
Meta <- data.frame(name, value)
config <- toString(x[["PARAMETERS"]][["Payload"]][["SENSOR_CONFIGURATION"]])
View(x)
View(x)
setwd("~/CWAconvert")
read_cwa = function(file, end = Inf, convert_time = TRUE, verbose = TRUE,
tz = "", ...) {
ext = tools::file_ext(file)
ext = tolower(ext)
args = list(
fileName = file, start = 0, end = end, progressBar = verbose,
...)
if (is.null(args$desiredtz)) {
args$desiredtz = tz
}
res = do.call(GGIR::g.cwaread, args = args)
res$data = dplyr::as_tibble(res$data)
if (convert_time) {
res$data$time = as.POSIXct(res$data$time, origin = "1970-01-01",
tz = tz)
# won't show the full hertz
dsecs = getOption("digits.secs", 2)
if (is.null(dsecs)) {
warning(
paste0("digit.secs option not defined, try options(digits.secs = 2)")
)
}
time1 = res$data$time[1]
if (res$header$start != time1) {
msg = paste0("Header start date is not same time as data$time,",
" may want to use convert_time = FALSE.")
warning(msg)
}
}
return(res)
}
P = read_cwa("Clock1_Axivity.cwa")
df <- as.data.frame(P[["data"]])
df.list <- as.list(df)
df.list
read_cwa = function(file, end = Inf, convert_time = TRUE, verbose = TRUE,
tz = "", ...) {
ext = tools::file_ext(file)
ext = tolower(ext)
args = list(
fileName = file, start = 0, end = end, progressBar = verbose,
...)
if (is.null(args$desiredtz)) {
args$desiredtz = tz
}
res = do.call(GGIR::g.cwaread, args = args)
res$data = dplyr::as_tibble(res$data)
if (convert_time) {
res$data$time = as.POSIXct(res$data$time, origin = "1970-01-01",
tz = tz)
# won't show the full hertz
dsecs = getOption("digits.secs", 2)
if (is.null(dsecs)) {
warning(
paste0("digit.secs option not defined, try options(digits.secs = 2)")
)
}
time1 = res$data$time[1]
if (res$header$start != time1) {
msg = paste0("Header start date is not same time as data$time,",
" may want to use convert_time = FALSE.")
warning(msg)
}
}
return(res)
}
P = read_cwa("Clock1_Axivity.cwa")
df <- as.data.frame(P[["data"]])
df.list <- as.list(df)
df.list
read_cwa = function(file, end = Inf, convert_time = TRUE, verbose = TRUE,
tz = "", ...) {
ext = tools::file_ext(file)
ext = tolower(ext)
args = list(
fileName = file, start = 0, end = end, progressBar = verbose,
...)
if (is.null(args$desiredtz)) {
args$desiredtz = tz
}
res = do.call(GGIR::g.cwaread, args = args)
res$data = dplyr::as_tibble(res$data)
if (convert_time) {
res$data$time = as.POSIXct(res$data$time, origin = "1970-01-01",
tz = tz)
# won't show the full hertz
dsecs = getOption("digits.secs", 2)
if (is.null(dsecs)) {
warning(
paste0("digit.secs option not defined, try options(digits.secs = 2)")
)
}
time1 = res$data$time[1]
if (res$header$start != time1) {
msg = paste0("Header start date is not same time as data$time,",
" may want to use convert_time = FALSE.")
warning(msg)
}
}
return(res)
}
P = read_cwa("test_files/Clock1_Axivity.cwa")
P = read_cwa("test_files/Clock1_Axivity.cwa")
read_cwa = function(file, end = Inf, convert_time = TRUE, verbose = TRUE,
tz = "", ...) {
ext = tools::file_ext(file)
ext = tolower(ext)
args = list(
fileName = file, start = 0, end = end, progressBar = verbose,
...)
if (is.null(args$desiredtz)) {
args$desiredtz = tz
}
res = do.call(GGIR::g.cwaread, args = args)
res$data = dplyr::as_tibble(res$data)
if (convert_time) {
res$data$time = as.POSIXct(res$data$time, origin = "1970-01-01",
tz = tz)
# won't show the full hertz
dsecs = getOption("digits.secs", 2)
if (is.null(dsecs)) {
warning(
paste0("digit.secs option not defined, try options(digits.secs = 2)")
)
}
time1 = res$data$time[1]
if (res$header$start != time1) {
msg = paste0("Header start date is not same time as data$time,",
" may want to use convert_time = FALSE.")
warning(msg)
}
}
return(res)
}
P = read_cwa("test_files/Clock1_Axivity.cwa")
read_cwa = function(file, end = Inf, convert_time = TRUE, verbose = TRUE,
tz = "", ...) {
ext = tools::file_ext(file)
ext = tolower(ext)
args = list(
fileName = file, start = 0, end = end, progressBar = verbose,
...)
if (is.null(args$desiredtz)) {
args$desiredtz = tz
}
res = do.call(GGIR::g.cwaread, args = args)
res$data = dplyr::as_tibble(res$data)
if (convert_time) {
res$data$time = as.POSIXct(res$data$time, origin = "1970-01-01",
tz = tz)
# won't show the full hertz
dsecs = getOption("digits.secs", 2)
if (is.null(dsecs)) {
warning(
paste0("digit.secs option not defined, try options(digits.secs = 2)")
)
}
time1 = res$data$time[1]
if (res$header$start != time1) {
msg = paste0("Header start date is not same time as data$time,",
" may want to use convert_time = FALSE.")
warning(msg)
}
}
return(res)
}
P = read_cwa("test_files/Clock1_Axivity.cwa")
source('~/CWAconvert/scripts/readCWA.R')
source('~/CWAconvert/scripts/readCWA.R')
read_cwa = function(file, end = Inf, convert_time = TRUE, verbose = TRUE,
tz = "", ...) {
ext = tools::file_ext(file)
ext = tolower(ext)
args = list(
fileName = file, start = 0, end = end, progressBar = verbose,
...)
if (is.null(args$desiredtz)) {
args$desiredtz = tz
}
res = do.call(GGIR::g.cwaread, args = args)
res$data = dplyr::as_tibble(res$data)
if (convert_time) {
res$data$time = as.POSIXct(res$data$time, origin = "1970-01-01",
tz = tz)
# won't show the full hertz
dsecs = getOption("digits.secs", 2)
if (is.null(dsecs)) {
warning(
paste0("digit.secs option not defined, try options(digits.secs = 2)")
)
}
time1 = res$data$time[1]
if (res$header$start != time1) {
msg = paste0("Header start date is not same time as data$time,",
" may want to use convert_time = FALSE.")
warning(msg)
}
}
return(res)
}
P = read_cwa("test_files/Clock1_Axivity.cwa")
read_cwa = function(file, end = Inf, convert_time = TRUE, verbose = TRUE,
tz = "", ...) {
ext = tools::file_ext(file)
ext = tolower(ext)
args = list(
fileName = file, start = 0, end = end, progressBar = verbose,
...)
if (is.null(args$desiredtz)) {
args$desiredtz = tz
}
res = do.call(GGIR::g.cwaread, args = args)
res$data = dplyr::as_tibble(res$data)
if (convert_time) {
res$data$time = as.POSIXct(res$data$time, origin = "1970-01-01",
tz = tz)
# won't show the full hertz
dsecs = getOption("digits.secs", 2)
if (is.null(dsecs)) {
warning(
paste0("digit.secs option not defined, try options(digits.secs = 2)")
)
}
time1 = res$data$time[1]
if (res$header$start != time1) {
msg = paste0("Header start date is not same time as data$time,",
" may want to use convert_time = FALSE.")
warning(msg)
}
}
return(res)
}
P = read_cwa("test_files/007_AxTest.cwa")
read_cwa = function(file, end = Inf, convert_time = TRUE, verbose = TRUE,
tz = "", ...) {
ext = tools::file_ext(file)
ext = tolower(ext)
args = list(
fileName = file, start = 0, end = end, progressBar = verbose,
...)
if (is.null(args$desiredtz)) {
args$desiredtz = tz
}
res = do.call(GGIR::g.cwaread, args = args)
res$data = dplyr::as_tibble(res$data)
if (convert_time) {
res$data$time = as.POSIXct(res$data$time, origin = "1970-01-01",
tz = tz)
# won't show the full hertz
dsecs = getOption("digits.secs", 2)
if (is.null(dsecs)) {
warning(
paste0("digit.secs option not defined, try options(digits.secs = 2)")
)
}
time1 = res$data$time[1]
if (res$header$start != time1) {
msg = paste0("Header start date is not same time as data$time,",
" may want to use convert_time = FALSE.")
warning(msg)
}
}
return(res)
}
P = read_cwa("test_files/007_AxTest.cwa")
df <- as.data.frame(P[["data"]])
View(df)
print(ncol(df))
read_cwa = function(file, end = Inf, convert_time = TRUE, verbose = TRUE,
tz = "", ...) {
ext = tools::file_ext(file)
ext = tolower(ext)
args = list(
fileName = file, start = 0, end = end, progressBar = verbose,
...)
if (is.null(args$desiredtz)) {
args$desiredtz = tz
}
res = do.call(GGIR::g.cwaread, args = args)
res$data = dplyr::as_tibble(res$data)
if (convert_time) {
res$data$time = as.POSIXct(res$data$time, origin = "1970-01-01",
tz = tz)
# won't show the full hertz
dsecs = getOption("digits.secs", 2)
if (is.null(dsecs)) {
warning(
paste0("digit.secs option not defined, try options(digits.secs = 2)")
)
}
time1 = res$data$time[1]
if (res$header$start != time1) {
msg = paste0("Header start date is not same time as data$time,",
" may want to use convert_time = FALSE.")
warning(msg)
}
}
return(res)
}
P = read_cwa("test_files/007_AxTest.cwa")
df <- as.data.frame(P[["data"]])
print(ncol(df))
df.list <- as.list(df)
df.lis
if (ncol(df) = 10) {
gx <- df.list[['gx']]
gy <- df.list[['gy']]
gz <- df.list[['gz']]
x <- df.list[['x']]
y <- df.list[['y']]
z <- df.list[['z']]
temp <- df.list[['temp']]
gyro <- 1
} else if (ncol(df) = 7) {
x <- df.list[['x']]
y <- df.list[['y']]
z <- df.list[['z']]
temp <- df.list[['temp']]
gyro <- 0
}
h <-(P[["header"]])
h
