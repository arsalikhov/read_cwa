install.packages("GGIR")
install.packages("rsleep")
install.packages("devtools")
devtools::install_github("muschellij2/read.cwa")
install.packages("read.cwa")
setwd("~/CWAconvert")
g.cwaread("007_AxTest.cwa", start = 0, end = 0, progressBar = FALSE,
desiredtz = "", configtz = c()))
g.cwaread("007_AxTest.cwa", start = 0, end = 0, progressBar = FALSE,
desiredtz = "", configtz = c())
library(GGIR)
g.cwaread("007_AxTest.cwa", start = 0, end = 0, progressBar = FALSE,
desiredtz = "", configtz = c())
g.cwaread("007_AxTest.cwa", start = 0, end = 0, progressBar = FALSE,
desiredtz = "", configtz = c())
g.cwaread("007_AxTest.cwa", start = 0, end = 0, progressBar = TRUE,
desiredtz = "", configtz = c())
data()
return(g.cwaread("007_AxTest.cwa", start = 0, end = 0, progressBar = TRUE,
desiredtz = "", configtz = c()))
library(GGIR)
results = g.cwaread("007_AxTest.cwa", start = 0, end = 0, progressBar = TRUE,
desiredtz = "", configtz = c())
return(results)
return(results)
results
results = g.cwaread("007_AxTest.cwa", start = 0, end = 0, progressBar = TRUE,
desiredtz = "", configtz = c(), value)
results
View(results)
results
library(GGIR)
results = g.cwaread("007_AxTest.cwa", start = 0, progressBar = TRUE,
desiredtz = "")
results
results = g.cwaread("007_AxTest.cwa", start = 0, progressBar = TRUE,
desiredtz = "")
results
library(GGIR)
results = g.cwaread("007_AxTest.cwa", progressBar = FALSE,
desiredtz = "")
results
install.packages('Rcpp')
install.packages("Rcpp")
library(Rcpp)
results = g.cwaread("007_AxTest.cwa", progressBar = FALSE,
desiredtz = "")
library(GGIR)
results = g.cwaread("007_AxTest.cwa", progressBar = FALSE,
desiredtz = "")
results
results <- g.cwaread("007_AxTest.cwa", progressBar = FALSE,
desiredtz = "")
results
library(GGIR)
results <- g.wavread("007)AxTest.wav", start = 1, end = 100,units="minutes")
results
results <- g.wavread("007)AxTest.wav", start = 1, end = 100,units="minutes")
results <- g.wavread("007_AxTest.wav", start = 1, end = 100,units="minutes")
results <- g.wavread("007_AxTest.wav")
results
read_cwa = function(file, end = Inf, convert_time = TRUE, verbose = TRUE,
tz = "", ...) {
ext = tools::file_ext(file)
isXzipped = function(...) {
R.utils::isCompressedFile(..., ext = "xz", fileClass = "xzfile")
}
if (isGzipped(file) || isBzipped(file) || isXzipped(file)) {
FUN = switch(ext,
gz = gzfile,
xz = xzfile,
bz2 = bzfile,
bz = bzfile)
file = decompressFile(
filename = file,
temporary = TRUE,
ext = ext,
FUN = FUN,
overwrite = TRUE,
remove = FALSE)
}
ext = tools::file_ext(file)
ext = tolower(ext)
args = list(
fileName = file, start = 0, end = end, progressBar = verbose,
...)
if (is.null(args$desiredtz)) {
args$desiredtz = tz
}
res = do.call(GGIR::g.cwaread, args = args)
res$data = dplyr::as_tibble(res$data)
if (convert_time) {
res$data$time = as.POSIXct(res$data$time, origin = "1970-01-01",
tz = tz)
# won't show the full hertz
dsecs = getOption("digits.secs")
if (is.null(dsecs)) {
warning(
paste0("digit.secs option not defined, try options(digits.secs = 2)")
)
}
time1 = res$data$time[1]
if (res$header$start != time1) {
msg = paste0("Header start date is not same time as data$time,",
" may want to use convert_time = FALSE.")
warning(msg)
}
}
return(res)
}
res = read_cwa("007_AxTest.cwa")
res
P = read_cwa("007_AxTest.cwa")
P
P = read_cwa("007_AxTest.cwa")
P = read_cwa("007_AxTest.zip")
read_cwa = function(file, end = Inf, convert_time = TRUE, verbose = TRUE,
tz = "", ...) {
ext = tools::file_ext(file)
ext = tolower(ext)
args = list(
fileName = file, start = 0, end = end, progressBar = verbose,
...)
if (is.null(args$desiredtz)) {
args$desiredtz = tz
}
res = do.call(GGIR::g.cwaread, args = args)
res$data = dplyr::as_tibble(res$data)
if (convert_time) {
res$data$time = as.POSIXct(res$data$time, origin = "1970-01-01",
tz = tz)
# won't show the full hertz
dsecs = getOption("digits.secs")
if (is.null(dsecs)) {
warning(
paste0("digit.secs option not defined, try options(digits.secs = 2)")
)
}
time1 = res$data$time[1]
if (res$header$start != time1) {
msg = paste0("Header start date is not same time as data$time,",
" may want to use convert_time = FALSE.")
warning(msg)
}
}
return(res)
}
P = read_cwa("007_AxTest.cwa")
P
install.packages("rlang")
library(rlang)
read_cwa = function(file, end = Inf, convert_time = TRUE, verbose = TRUE,
tz = "", ...) {
ext = tools::file_ext(file)
ext = tolower(ext)
args = list(
fileName = file, start = 0, end = end, progressBar = verbose,
...)
if (is.null(args$desiredtz)) {
args$desiredtz = tz
}
res = do.call(GGIR::g.cwaread, args = args)
res$data = dplyr::as_tibble(res$data)
if (convert_time) {
res$data$time = as.POSIXct(res$data$time, origin = "1970-01-01",
tz = tz)
# won't show the full hertz
dsecs = getOption("digits.secs")
if (is.null(dsecs)) {
warning(
paste0("digit.secs option not defined, try options(digits.secs = 2)")
)
}
time1 = res$data$time[1]
if (res$header$start != time1) {
msg = paste0("Header start date is not same time as data$time,",
" may want to use convert_time = FALSE.")
warning(msg)
}
}
return(res)
}
P = read_cwa("007_AxTest.cwa")
P
View(P)
View(P[["data"]])
as.data.frame(p[["data"]])
as.data.frame(P[["data"]])
df <- as.data.frame(P[["data"]])
View(P)
detach("package:rlang", unload = TRUE)
P[["data"]]
package.skeleton()
packages()
(.packages())
# won't show the full hertz
dsecs = getOption("digits.secs")
read_cwa = function(file, end = Inf, convert_time = TRUE, verbose = TRUE,
tz = "", ...) {
ext = tools::file_ext(file)
ext = tolower(ext)
args = list(
fileName = file, start = 0, end = end, progressBar = verbose,
...)
if (is.null(args$desiredtz)) {
args$desiredtz = tz
}
res = do.call(GGIR::g.cwaread, args = args)
res$data = dplyr::as_tibble(res$data)
if (convert_time) {
res$data$time = as.POSIXct(res$data$time, origin = "1970-01-01",
tz = tz)
# won't show the full hertz
dsecs = getOption("digits.secs")
if (is.null(dsecs)) {
warning(
paste0("digit.secs option not defined, try options(digits.secs = 2)")
)
}
time1 = res$data$time[1]
if (res$header$start != time1) {
msg = paste0("Header start date is not same time as data$time,",
" may want to use convert_time = FALSE.")
warning(msg)
}
}
return(res)
}
P = read_cwa("007_AxTest.cwa")
df <- as.data.frame(P[["data"]])
read_cwa = function(file, end = Inf, convert_time = TRUE, verbose = TRUE,
tz = "", ...) {
ext = tools::file_ext(file)
ext = tolower(ext)
args = list(
fileName = file, start = 0, end = end, progressBar = verbose,
...)
if (is.null(args$desiredtz)) {
args$desiredtz = tz
}
res = do.call(GGIR::g.cwaread, args = args)
res$data = dplyr::as_tibble(res$data)
if (convert_time) {
res$data$time = as.POSIXct(res$data$time, origin = "1970-01-01",
tz = tz)
# won't show the full hertz
dsecs = getOption("digits.secs")
if (is.null(dsecs)) {
warning(
paste0("digit.secs option not defined, try options(digits.secs = 2)")
)
}
time1 = res$data$time[1]
if (res$header$start != time1) {
msg = paste0("Header start date is not same time as data$time,",
" may want to use convert_time = FALSE.")
warning(msg)
}
}
return(res)
}
P = read_cwa("007_AxTest.cwa")
read_cwa = function(file, end = Inf, convert_time = TRUE, verbose = TRUE,
tz = "", ...) {
ext = tools::file_ext(file)
ext = tolower(ext)
args = list(
fileName = file, start = 0, end = end, progressBar = verbose,
...)
if (is.null(args$desiredtz)) {
args$desiredtz = tz
}
res = do.call(GGIR::g.cwaread, args = args)
res$data = dplyr::as_tibble(res$data)
if (convert_time) {
res$data$time = as.POSIXct(res$data$time, origin = "1970-01-01",
tz = tz)
# won't show the full hertz
options(digits.secs = 2)
dsecs = getOption("digits.secs")
if (is.null(dsecs)) {
warning(
paste0("digit.secs option not defined, try options(digits.secs = 2)")
)
}
time1 = res$data$time[1]
if (res$header$start != time1) {
msg = paste0("Header start date is not same time as data$time,",
" may want to use convert_time = FALSE.")
warning(msg)
}
}
return(res)
}
P = read_cwa("007_AxTest.cwa")
View(results)
View(results)
read_cwa = function(file, end = Inf, convert_time = TRUE, verbose = TRUE,
tz = "", ...) {
ext = tools::file_ext(file)
ext = tolower(ext)
args = list(
fileName = file, start = 0, end = end, progressBar = verbose,
...)
if (is.null(args$desiredtz)) {
args$desiredtz = tz
}
res = do.call(GGIR::g.cwaread, args = args)
res$data = dplyr::as_tibble(res$data)
if (convert_time) {
res$data$time = as.POSIXct(res$data$time, origin = "1970-01-01",
tz = tz)
# won't show the full hertz
dsecs = options(digits.secs = 2)
# dsecs = getOption("digits.secs")
if (is.null(dsecs)) {
warning(
paste0("digit.secs option not defined, try options(digits.secs = 2)")
)
}
time1 = res$data$time[1]
if (res$header$start != time1) {
msg = paste0("Header start date is not same time as data$time,",
" may want to use convert_time = FALSE.")
warning(msg)
}
}
return(res)
}
P = read_cwa("007_AxTest.cwa")
source('~/CWAconvert/readCWA.R')
read_cwa = function(file, end = Inf, convert_time = TRUE, verbose = TRUE,
tz = "", ...) {
ext = tools::file_ext(file)
ext = tolower(ext)
args = list(
fileName = file, start = 0, end = end, progressBar = verbose,
...)
if (is.null(args$desiredtz)) {
args$desiredtz = tz
}
res = do.call(GGIR::g.cwaread, args = args)
res$data = dplyr::as_tibble(res$data)
if (convert_time) {
res$data$time = as.POSIXct(res$data$time, origin = "1970-01-01",
tz = tz)
# won't show the full hertz
dsecs = getOption("digits.secs", 2)
if (is.null(dsecs)) {
warning(
paste0("digit.secs option not defined, try options(digits.secs = 2)")
)
}
time1 = res$data$time[1]
if (res$header$start != time1) {
msg = paste0("Header start date is not same time as data$time,",
" may want to use convert_time = FALSE.")
warning(msg)
}
}
return(res)
}
P = read_cwa("007_AxTest.cwa")
P = read_cwa("007_AxTest.cwa")
df <- as.data.frame(P[["data"]])
View(df)
View(P)
